{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst baseUrl = 'https://swapi.dev/api/';\nconst useFetch = (prefix, params) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(baseUrl + prefix + params);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An unknown error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [params]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFetch, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","baseUrl","useFetch","prefix","params","_s","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","ok","Error","statusText","result","json","err","message"],"sources":["/home/e/develop/BondSport/src/hooks/useFetch.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { SWAPIResponse } from '../types/swapiResponse';\nimport { FetchStateProps } from '../types/fetch';\n\nconst baseUrl = 'https://swapi.dev/api/';\n\nconst useFetch = <T>(prefix: string, params: string | null): FetchStateProps<SWAPIResponse<T>> => {\n\n  const [data, setData] = useState<SWAPIResponse<T> | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(baseUrl + prefix + params);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const result: SWAPIResponse<T> = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An unknown error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [params]);\n\n  return { data, loading, error };\n};\n\nexport default useFetch;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAI3C,MAAMC,OAAO,GAAG,wBAAwB;AAExC,MAAMC,QAAQ,GAAGA,CAAIC,MAAc,EAAEC,MAAqB,KAAwC;EAAAC,EAAA;EAEhG,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAA0B,IAAI,CAAC;EAC/D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACb,OAAO,GAAGE,MAAM,GAAGC,MAAM,CAAC;QACvD,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,UAAUH,QAAQ,CAACI,UAAU,EAAE,CAAC;QAClD;QACA,MAAMC,MAAwB,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACtDZ,OAAO,CAACW,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZT,QAAQ,CAACS,GAAG,YAAYJ,KAAK,GAAGI,GAAG,CAACC,OAAO,GAAG,2BAA2B,CAAC;MAC5E,CAAC,SAAS;QACRZ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CA7BIH,QAAQ;AA+Bd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}